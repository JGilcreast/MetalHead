// MetalHead - Opensource Firmware & Software For The 85V Automatic Stirrup Bender
// Copyright (C) 2025 Connor McMillan (connor@mcmillan.website)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";

message status_indicators_t {
  bool shear_cut = 1;
  bool shear_home = 2;
  bool tool_out = 3;
  bool tool_in = 4;
  bool feed_forward = 5;
  bool feed_reverse = 6;
  bool head_cw = 7;
  bool head_ccw = 8;
  bool head_out = 9;
  bool head_in = 10;

  bool encoder_feed_set = 11;
  bool encoder_feed_reset = 12;
  bool encoder_bend_set = 13;
  bool encoder_bend_reset = 14;
  bool proximity_head_out = 15;
  bool proximity_head_in = 16;
  bool proximity_shear_home = 17;
  bool proximity_shear_cut = 18;
  bool proximity_tool_in = 19;
  bool proximity_tool_out = 20;
  bool shear_button = 21;
  bool proximity_head_limit = 22;
  bool proximity_head_cw = 23;
  bool proximity_head_ccw = 24;
  bool auto_button = 25;
  bool e_stop = 26;
  bool fuse = 27;
  bool vraw24 = 28;
  bool aux24v = 29;

  int32 encoder_feed_count = 30;
  int32 encoder_bend_count = 31;

  float twenty_four_vraw_bus_voltage = 32;
  float twenty_four_vraw_bus_current = 33;
  float aux_twenty_four_v_bus_voltage = 34;
  float aux_twenty_four_v_bus_current = 35;
  float twelve_v_bus_voltage = 36;
  float twelve_v_bus_current = 37;
  float five_v_bus_voltage = 38;
  float five_v_bus_current = 39;
  float three_v_three_v_bus_voltage = 40;
  float three_v_three_v_bus_current = 41;
  float f_gnd_bus_voltage = 42;
  float f_gnd_bus_current = 43;
}

enum state_t {
    STATE_IDLE = 0;
    STATE_PROCESS_RECIPE = 1;
    STATE_HOME = 2;
    STATE_ESTOP = 3;
    STATE_ERROR = 4;
}

enum action_t {
    ACTION_SHEAR = 0;
    ACTION_TOOL_OUT = 1;
    ACTION_TOOL_IN = 2;
    ACTION_FEED_FORWARD = 3;
    ACTION_FEED_REVERSE = 4;
    ACTION_HEAD_CW = 5;
    ACTION_HEAD_CCW = 6;
    ACTION_HEAD_OUT = 7;
    ACTION_HEAD_IN = 8;
    ACTION_SHEAR_RETRACT = 9;
    ACTION_TOOL_RETRACT = 10;
    ACTION_HEAD_RETRACT = 11;
    ACTION_NONE = 12;
}

message hmi_client_pkt {
  repeated int32 serial_number = 1;
  repeated int32 mac_address = 2;
  repeated int32 ip_address = 3;
  repeated int32 subnet_mask = 4;
  repeated int32 hmi_ip_address = 5;
  int32 hmi_port = 6;
  int32 major_version = 7;
  int32 minor_version = 8;
  int32 patch_version = 9;
  int32 boot_count = 10;

  status_indicators_t status_indicators = 11;
  state_t state = 12;
  action_t action = 13;
}

